
https://www.rfc-editor.org/rfc/rfc1951
	
	1951 1.3 'standard'/explanation of how DEFLATE works


general:

	DEFLATE combines HuffmanCoding (see bigbadwolf) and Lz77 (see dir) to compress stuff

	encoding: lz77 then huffman coding


bit-byte ordering:

	see 3.1.1 of doc

	multi-byte value have least-significant byte first

	bits packed least-to-most-significant
		EXCEPT huffman codes, which are packed most-to-least
			[? is this just so you can read them sequentially visually better ?]



extra rules for Huffman coding 
	see 3.2.2

	2 extra rules:
		shorter codes must be less than longer codes. eg: cannot have '1' as a huffman code & '00'. But, could have '0' and '10'
			(ofc this is not always necessarily the case without this restriction)
		codes of the same length (eg 110 and 111) must refer back to lexicographically-sequential values.
			eg: 110=>A & 111=>B but not: 110=>B & 111=>A

	these rules allow the codes to be stored more efficiently and mapped back to their respective values more efficiently/deterministically


3.2.2 also outlines pseudocode for how to use these rules to store/calculate the huffman tree
	
	1) blc for 2,1,3,3 = [0, 1, 1, 2] 
		blc[x] = countOfHuffmancodesWithThatManyDigits

	2) creates [X, 0, 10, 110] (aka 0,2,6)
		I am 99% sure MAX_BITS = 3 for the largest-digitted huffmancode
		note, is "smallest code for each code length", not each code length

		ig next_code[0] is undefined? since we start writing at index 1.

	3) creates [10, 0, 110, 111] (aka 2,0,6,7)
		(refer to earlier)
			tree[I].Len = bitlength for each code. Lengths in this ex would be 2,1,3,3 from above
				(so I presume tree[I] only lists actual symbol/code items, not all possible tree indices including the nodes)
				^ how are they ordered then? 
				they are ordered as in the example. Sequentially based off of the symbol ordering
			tree[I].Code = the huffman code thing. thats it

		is max_code just the number of codes?
			yes, it must be

		increments next_code[len] so that the next code is incremented. Duh you stupid idiot
