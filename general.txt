
https://www.rfc-editor.org/rfc/rfc1951
	
	1951 1.3 'standard'/explanation of how DEFLATE works


RELATING TO PNGs:
	I was learning about DEFLATE in order to decompress a PNG.
	Officially, PNGs use the zlib spec: https://www.rfc-editor.org/rfc/rfc1950
	?? I think ?? rather than the actual DEFLATE spec linked above.
	
	? I think zlib adds extra wrapping around a regular deflate sequence? If so, I would assume that within the deflate sequence, its still little-endian instead
		(because zlib streams can be compression methods other than DEFLATE.)
		YES, it seems so. See page 6 of the doc

	precedes "compressed data" w/ 2 bytes (or 3 bytes), and follows with 4 more
		header:
			1 byte CMF
				0-3 = Compression Method. 8 = PNG spec
				4-7 = additional info. For CM8, is base-2 log of Lz77 window size minus 8
					with CM8, additional info cannot be > 7
			1 byte FLG flags
				0-4 check
					value so as to validate prev byte
					(CMF with FLG as a 16-bit uint, MostSignificantByte order) % 31 == 0
				5 = FDICT. indicates preset dict
					if set, DICT identifier will be present immediately after FLG byte
					a dictionary is seq of bytes initially fed to compressor, w/o producing output
					DICT is Adler-32 (see below) checksum of these bytes
					decompressor can determine dict based on the checksum
				6-7 FLEVEL. lvl of compression
					set by CM 
					for CM8
						00 - compressor used fastest alg
						01 - used fast algorithm
						10 - used default alg
						11 - used max compression, slowest alg

					! NOT USED FOR DECOMPRESSION
						indicates if recompression could be useful
	
	"compressed data"
		for CM8, is DEFLATE format according to the DEFLATE spec (doc above)

	4 trailing bytes, ADLER-32
		checksum of the uncompressed data, excluding dictionary data
		computed according to ADLER-32 alg

		...

	Compliant decompressors must:
		check CMF, FLG, ADLER32 for errors
		support the CM values outlined in this specification (just 8) & err otherwise
		Err if FDICT set & DICTID is not recognized
		may ignore FLEVEL
		when within another format (PNG in my case), must support all standard dicts of that format
			& reject any dicts not in that outer spec

		My plan:
			check CM and FLG
			leave ADLER32 checking for later, unless useful for debugging
			Check PNG dicts. I dont think it has any? Start by ignoring them & add them later
			ignore FLEVEL

general:

	DEFLATE combines HuffmanCoding (see bigbadwolf) and Lz77 (see dir) to compress stuff

	encoding: lz77 then huffman coding


bit-byte ordering:

	see 3.1.1 of doc

	multi-byte value have least-significant byte first

	bits packed least-to-most-significant
		EXCEPT huffman codes, which are packed most-to-least
			[? is this just so you can read them sequentially visually better ?]



extra rules for Huffman coding 
	see 3.2.2

	2 extra rules:
		shorter codes must be less than longer codes. eg: cannot have '1' as a huffman code & '00'. But, could have '0' and '10'
			(ofc this is not always necessarily the case without this restriction)
		codes of the same length (eg 110 and 111) must refer back to lexicographically-sequential values.
			eg: 110=>A & 111=>B but not: 110=>B & 111=>A

	these rules allow the codes to be stored more efficiently and mapped back to their respective values more efficiently/deterministically


3.2.2 also outlines pseudocode for how to use these rules to store/calculate the huffman tree
	
	1) blc for 2,1,3,3 = [0, 1, 1, 2] 
		blc[x] = countOfHuffmancodesWithThatManyDigits

	2) creates [X, 0, 10, 110] (aka 0,2,6)
		I am 99% sure MAX_BITS = 3 for the largest-digitted huffmancode
		note, is "smallest code for each code length", not each code length

		ig next_code[0] is undefined? since we start writing at index 1.

	3) creates [10, 0, 110, 111] (aka 2,0,6,7)
		(refer to earlier)
			tree[I].Len = bitlength for each code. Lengths in this ex would be 2,1,3,3 from above
				(so I presume tree[I] only lists actual symbol/code items, not all possible tree indices including the nodes)
				^ how are they ordered then? 
				they are ordered as in the example. Sequentially based off of the symbol ordering
			tree[I].Code = the huffman code thing. thats it

		is max_code just the number of codes?
			yes, it must be

		increments next_code[len] so that the next code is incremented. Duh you stupid idiot
			cuz u start with the lowest-possible for that bitLength

3.2.3 Block Format
	each compressed block is prefixed with 3 bits as a header
		'first bit' (highest right?)
			BFINAL
			1 if this is the final block, 0 otherwise
		next 2
			type of compression
			00 = none
			01 = fixed huffman codes
			10 = dynamic huffman codes
			11 = error (reserved)

	outlinse sequence of events for decoding data
	
3.2.4 non-compressed blocks
	raw data preceded by 4 bytes:
		2 bytes = length
		2 bytes = !length (ones complement)
			[seems wasteful nowadays]
			as a check against length for corrupted data. yep thats it
		[dont forget is little endian]

3.2.5 Compressed Blocks
	[doesnt explicitly mention they are also preceded by length & !length, but can be inferred]

	to allow lz77's repeated string denotion, Alphabet for huffman encoding is:
		0-255 for actual byte values
		256 for EndOfBlock
		257-285 for "length codes"
			
			which will specify (according to a table, p12) additional subsequent bytes which are part of the length, depending on length

?		[ Are the distance codes simply placed immediately following any identified length codes ]
			Yes. after the length-extensions ofcc


3.2.6 Compression with fixed huffman codes
	FOR FIXED CODES, BTYPE = 01

	...

3.2.7 Compression with dynamic Huffman codes
	
	13 bits for various counts of code-lengths
		5 : # of literal/length codes - 257
			represent values 257-286
		5 : # of distance codes - 1
			represent values 1-32

			Im so stupid. I will not elaborate. No proof shall ever exist.

		4 HCLEN : # of codeLength-codes - 4
			(for the second-level huffman tree over the tree for the compressed data)
				
	codeLength-code lengths
		(HCLEN + 4) * 3 bits long
			(since each length is a 3-bit integer)

			order: 16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15
	
	code lengths for the byte-literals and lengths
		HLIT + 257 codes long

	code lengths for the 'distance alphabet'
		HDIST + 1 codes long

	
	

structural overview
	
	3 bit header
	32bit length (16 & 16)
	var bytes of data (up to 2^16-1)
		13 + var bits tree encodings
		actual data
		terminating code

	^DEFLATE

	zlib:

		16bit header (CMF, FLG)
		(possible) 8bit DICTID
		DEFLATEd data
		32bit Adler32 checksum

	png IDAT chunk:
		
		32bit length
		32bit identifier (IDAT)
		zlib data
		32bit CRC

		always zlib CM == 8








Source: https://zlib.net/feldspar.html
	
	Very useful for visualizing lz77

	(goes over huffman/lz77 combination as above)

	encoding trees alongside the data:
		as explained above, when trees are encoded alongside the data, they are represented by a sequence of code-lengths, to be reconstructed.
		Additionally, this sequence (representing the tree to decode the compressed data) is further-compressed by another huffman tree.
			that other tree is then stored again.
			its values are in a special order:
				16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15
				last-listed elements are most likely to be 0, in which case they can be excluded

				these are 3-bit integers

	with that, let me go back to 3.2.7 and see if I can understand better
